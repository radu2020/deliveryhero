AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Vendor API - Serverless App with API Key

Globals:
  Function:
    Timeout: 10
    Runtime: python3.13
    Architectures:
      - x86_64

Parameters:
  StageName:
    Type: String
    Default: v1
    Description: Name of API stage.
  KeyName:
    Type: String
    Default: MyApiKey
    Description: Name of an API key

Resources:
  # API Definition
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: VendorApi
      StageName: !Sub '${StageName}'
      Auth:
        DefaultAuthorizer: NONE
        AddDefaultAuthorizerToCorsPreflight: false
        ApiKeyRequired: true
      Cors:
        AllowMethods: "'GET, POST, OPTIONS'"
        AllowOrigin: "'http://localhost:8000'"
        AllowHeaders: "'Content-type, x-api-key'"
  
  # DynamoDB Tables
  VendorsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: Vendors
      PrimaryKey:
        Name: vendor_id
        Type: String

  IncentivesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: Incentives
      PrimaryKey:
        Name: vendor_id
        Type: String

  # Lambda Functions
  GetVendorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetVendorFunction
      CodeUri: get_vendor/
      Handler: app.lambda_handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref VendorsTable
        - DynamoDBReadPolicy:
            TableName: !Ref IncentivesTable
        - AWSLambdaBasicExecutionRole
      Events:
        GetVendorApi:
          Type: Api
          Properties:
            Path: /vendor/{vendor_id}
            Method: get
            RestApiId: !Ref Api
        Options:
          Type: Api
          Properties:
            Path: /vendor/{vendor_id}
            Method: options
            RestApiId: !Ref Api
            Auth:
              ApiKeyRequired: false

  CreateVendorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CreateVendorFunction
      CodeUri: create_vendor/
      Handler: app.lambda_handler
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref VendorsTable
        - DynamoDBWritePolicy:
            TableName: !Ref IncentivesTable
        - AWSLambdaBasicExecutionRole
      Events:
        PostVendorApi:
          Type: Api
          Properties:
            Path: /vendor
            Method: post
            RestApiId: !Ref Api

  SeederFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: VendorSeederFunction
      CodeUri: seeder/
      Handler: app.lambda_handler
      Runtime: python3.13
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref VendorsTable
        - DynamoDBWritePolicy:
            TableName: !Ref IncentivesTable
        - AWSLambdaBasicExecutionRole
      Timeout: 300  #Required to allow enough time in case of 10K writes
      MemorySize: 512

  # Usage Plan
  UsagePlan:
      Type: AWS::ApiGateway::UsagePlan
      Properties:
        Description: Example usage plan with a monthly quota of 1000 calls
        ApiStages:
          - ApiId: !Ref Api
            Stage: !Ref Api.Stage
        Quota:
          Limit: 1000
          Period: MONTH
        Throttle:
          RateLimit: 100.0
          BurstLimit: 200
        UsagePlanName: "My Usage Plan"
  
  # Api Key
  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties: 
      Description: API Key
      Name: !Sub '${KeyName}'
      Enabled: True
  
  # Usage Plan to Api Key Association
  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

Outputs:
  ApiRootUrl:
    Description: Root Url of the API
    Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${StageName}'
